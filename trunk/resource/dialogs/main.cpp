/////////////////////////////////////////////////////////////////////////////
// Name:        main.cpp
// Purpose:     
// Author:      Lucien Schreiber
// Modified by: 
// Created:     Tue 27 Nov 17:52:52 2007
// RCS-ID:      
// Copyright:   (c) CREALP 2007
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (Personal Edition), Tue 27 Nov 17:52:52 2007

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "main.h"

////@begin XPM images
////@end XPM images


/*!
 * main type definition
 */

IMPLEMENT_DYNAMIC_CLASS( main, wxDialog )


/*!
 * main event table definition
 */

BEGIN_EVENT_TABLE( main, wxDialog )

////@begin main event table entries
////@end main event table entries

END_EVENT_TABLE()


/*!
 * main constructors
 */

main::main()
{
    Init();
}

main::main( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


/*!
 * main creator
 */

bool main::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin main creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end main creation
    return true;
}


/*!
 * main destructor
 */

main::~main()
{
////@begin main destruction
////@end main destruction
}


/*!
 * Member initialisation
 */

void main::Init()
{
////@begin main member initialisation
////@end main member initialisation
}


/*!
 * Control creation for main
 */

void main::CreateControls()
{    
////@begin main content construction
    // Generated by DialogBlocks, Tue 27 Nov 18:14:51 2007 (Personal Edition)

    main* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxToolBar* itemToolBar3 = new wxToolBar( itemDialog1, ID_TOOLBAR1, wxDefaultPosition, wxDefaultSize, wxTB_FLAT|wxTB_HORIZONTAL );
    itemToolBar3->SetToolBitmapSize(wxSize(32, 32));
    wxBitmap itemtool4Bitmap(itemDialog1->GetBitmapResource(wxT("image0007.png")));
    wxBitmap itemtool4BitmapDisabled;
    itemToolBar3->AddTool(ID_TOOL1, _("Select"), itemtool4Bitmap, itemtool4BitmapDisabled, wxITEM_NORMAL, _T(""), wxEmptyString);
    wxBitmap itemtool5Bitmap(itemDialog1->GetBitmapResource(wxT("image0009.png")));
    wxBitmap itemtool5BitmapDisabled;
    itemToolBar3->AddTool(ID_TOOL2, _T(""), itemtool5Bitmap, itemtool5BitmapDisabled, wxITEM_NORMAL, _T(""), wxEmptyString);
    itemToolBar3->Realize();
    itemBoxSizer2->Add(itemToolBar3, 0, wxALIGN_CENTER_HORIZONTAL|wxALL, 5);

////@end main content construction
}


/*!
 * Should we show tooltips?
 */

bool main::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap main::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin main bitmap retrieval
    wxUnusedVar(name);
    if (name == _T("image0007.png"))
    {
        wxBitmap bitmap(_T("image0007.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    else if (name == _T("image0009.png"))
    {
        wxBitmap bitmap(_T("image0009.png"), wxBITMAP_TYPE_PNG);
        return bitmap;
    }
    return wxNullBitmap;
////@end main bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon main::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin main icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end main icon retrieval
}
