/////////////////////////////////////////////////////////////////////////////
// Name:        dlg_attribution.cpp
// Purpose:     
// Author:      Lucien Schreiber
// Modified by: 
// Created:     Mon  6 Aug 15:19:35 2007
// RCS-ID:      
// Copyright:   (c) CREALP 2007
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (Personal Edition), Mon 6 Aug 15:19:35 2007

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "dlg_attribution.h"

////@begin XPM images
////@end XPM images


/*!
 * dlg_attribution type definition
 */

IMPLEMENT_DYNAMIC_CLASS( dlg_attribution, wxDialog )


/*!
 * dlg_attribution event table definition
 */

BEGIN_EVENT_TABLE( dlg_attribution, wxDialog )

////@begin dlg_attribution event table entries
////@end dlg_attribution event table entries

END_EVENT_TABLE()


/*!
 * dlg_attribution constructors
 */

dlg_attribution::dlg_attribution()
{
    Init();
}

dlg_attribution::dlg_attribution( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


/*!
 * dlg_attribution creator
 */

bool dlg_attribution::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin dlg_attribution creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end dlg_attribution creation
    return true;
}


/*!
 * dlg_attribution destructor
 */

dlg_attribution::~dlg_attribution()
{
////@begin dlg_attribution destruction
////@end dlg_attribution destruction
}


/*!
 * Member initialisation
 */

void dlg_attribution::Init()
{
////@begin dlg_attribution member initialisation
////@end dlg_attribution member initialisation
}


/*!
 * Control creation for dlg_attribution
 */

void dlg_attribution::CreateControls()
{    
////@begin dlg_attribution content construction
    // Generated by DialogBlocks, Tue 30 Oct 15:19:29 2007 (Personal Edition)

    dlg_attribution* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxNotebook* itemNotebook3 = new wxNotebook( itemDialog1, ID_NOTEBOOK1, wxDefaultPosition, wxDefaultSize, wxBK_DEFAULT );

    wxPanel* itemPanel4 = new wxPanel( itemNotebook3, ID_PANEL1, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
    wxBoxSizer* itemBoxSizer5 = new wxBoxSizer(wxVERTICAL);
    itemPanel4->SetSizer(itemBoxSizer5);

    wxGrid* itemGrid6 = new wxGrid( itemPanel4, ID_GRID1, wxDefaultPosition, wxSize(200, 150), wxHSCROLL|wxVSCROLL );
    itemGrid6->SetDefaultColSize(50);
    itemGrid6->SetDefaultRowSize(25);
    itemGrid6->SetColLabelSize(25);
    itemGrid6->SetRowLabelSize(50);
    itemGrid6->CreateGrid(2, 4, wxGrid::wxGridSelectCells);
    itemBoxSizer5->Add(itemGrid6, 1, wxGROW|wxALL, 5);

    wxFlexGridSizer* itemFlexGridSizer7 = new wxFlexGridSizer(2, 2, 0, 0);
    itemFlexGridSizer7->AddGrowableCol(1);
    itemBoxSizer5->Add(itemFlexGridSizer7, 0, wxGROW|wxALL, 5);
    wxStaticText* itemStaticText8 = new wxStaticText( itemPanel4, wxID_STATIC, _("Layer name :"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer7->Add(itemStaticText8, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 5);

    wxArrayString itemChoice9Strings;
    itemChoice9Strings.Add(_("Polygons_TS"));
    wxChoice* itemChoice9 = new wxChoice( itemPanel4, ID_CHOICE16, wxDefaultPosition, wxDefaultSize, itemChoice9Strings, 0 );
    itemChoice9->SetStringSelection(_("Polygons_TS"));
    itemFlexGridSizer7->Add(itemChoice9, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxBOTTOM, 5);

    wxStaticText* itemStaticText10 = new wxStaticText( itemPanel4, wxID_STATIC, _("Frequency :"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer7->Add(itemStaticText10, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 5);

    wxArrayString itemChoice11Strings;
    itemChoice11Strings.Add(_("Frequent"));
    itemChoice11Strings.Add(_("Less frequent"));
    wxChoice* itemChoice11 = new wxChoice( itemPanel4, ID_CHOICE17, wxDefaultPosition, wxDefaultSize, itemChoice11Strings, 0 );
    itemChoice11->SetStringSelection(_("Frequent"));
    itemFlexGridSizer7->Add(itemChoice11, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT, 5);

    wxBoxSizer* itemBoxSizer12 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer5->Add(itemBoxSizer12, 0, wxGROW|wxALL, 5);
    wxToggleButton* itemToggleButton13 = new wxToggleButton( itemPanel4, ID_TOGGLEBUTTON9, _("+"), wxDefaultPosition, wxSize(40, -1), 0 );
    itemToggleButton13->SetValue(false);
    itemBoxSizer12->Add(itemToggleButton13, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxToggleButton* itemToggleButton14 = new wxToggleButton( itemPanel4, ID_TOGGLEBUTTON11, _("-"), wxDefaultPosition, wxSize(40, -1), 0 );
    itemToggleButton14->SetValue(false);
    itemBoxSizer12->Add(itemToggleButton14, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxToggleButton* itemToggleButton15 = new wxToggleButton( itemPanel4, ID_TOGGLEBUTTON12, _("Import..."), wxDefaultPosition, wxDefaultSize, 0 );
    itemToggleButton15->SetValue(false);
    itemBoxSizer12->Add(itemToggleButton15, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxToggleButton* itemToggleButton16 = new wxToggleButton( itemPanel4, ID_TOGGLEBUTTON10, _("Export..."), wxDefaultPosition, wxDefaultSize, 0 );
    itemToggleButton16->SetValue(false);
    itemBoxSizer12->Add(itemToggleButton16, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    itemNotebook3->AddPage(itemPanel4, _("Lines"));

    wxPanel* itemPanel17 = new wxPanel( itemNotebook3, ID_PANEL2, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxTAB_TRAVERSAL );

    itemNotebook3->AddPage(itemPanel17, _("Points"));

    wxPanel* itemPanel18 = new wxPanel( itemNotebook3, ID_PANEL3, wxDefaultPosition, wxDefaultSize, wxSUNKEN_BORDER|wxTAB_TRAVERSAL );

    itemNotebook3->AddPage(itemPanel18, _("Polygons"));

    itemBoxSizer2->Add(itemNotebook3, 1, wxGROW|wxALL, 5);

    wxStdDialogButtonSizer* itemStdDialogButtonSizer19 = new wxStdDialogButtonSizer;

    itemBoxSizer2->Add(itemStdDialogButtonSizer19, 0, wxALIGN_RIGHT|wxALL, 5);
    wxButton* itemButton20 = new wxButton( itemDialog1, wxID_OK, _("&OK"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStdDialogButtonSizer19->AddButton(itemButton20);

    wxButton* itemButton21 = new wxButton( itemDialog1, wxID_CANCEL, _("&Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStdDialogButtonSizer19->AddButton(itemButton21);

    itemStdDialogButtonSizer19->Realize();

////@end dlg_attribution content construction
}


/*!
 * Should we show tooltips?
 */

bool dlg_attribution::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap dlg_attribution::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin dlg_attribution bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end dlg_attribution bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon dlg_attribution::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin dlg_attribution icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end dlg_attribution icon retrieval
}
