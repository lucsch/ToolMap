/////////////////////////////////////////////////////////////////////////////
// Name:        addfield.cpp
// Purpose:     
// Author:      Lucien Schreiber
// Modified by: 
// Created:     Mon 20 Aug 15:04:17 2007
// RCS-ID:      
// Copyright:   (c) CREALP 2007
// Licence:     
/////////////////////////////////////////////////////////////////////////////

// Generated by DialogBlocks (Personal Edition), Mon 20 Aug 15:04:17 2007

// For compilers that support precompilation, includes "wx/wx.h".
#include "wx/wxprec.h"

#ifdef __BORLANDC__
#pragma hdrstop
#endif

#ifndef WX_PRECOMP
#include "wx/wx.h"
#endif

////@begin includes
////@end includes

#include "addfield.h"

////@begin XPM images
////@end XPM images


/*!
 * ProjectDefFieldDlg type definition
 */

IMPLEMENT_DYNAMIC_CLASS( ProjectDefFieldDlg, wxDialog )


/*!
 * ProjectDefFieldDlg event table definition
 */

BEGIN_EVENT_TABLE( ProjectDefFieldDlg, wxDialog )

////@begin ProjectDefFieldDlg event table entries
////@end ProjectDefFieldDlg event table entries

END_EVENT_TABLE()


/*!
 * ProjectDefFieldDlg constructors
 */

ProjectDefFieldDlg::ProjectDefFieldDlg()
{
    Init();
}

ProjectDefFieldDlg::ProjectDefFieldDlg( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
    Init();
    Create(parent, id, caption, pos, size, style);
}


/*!
 * wxDialog creator
 */

bool ProjectDefFieldDlg::Create( wxWindow* parent, wxWindowID id, const wxString& caption, const wxPoint& pos, const wxSize& size, long style )
{
////@begin ProjectDefFieldDlg creation
    SetExtraStyle(wxWS_EX_BLOCK_EVENTS);
    wxDialog::Create( parent, id, caption, pos, size, style );

    CreateControls();
    if (GetSizer())
    {
        GetSizer()->SetSizeHints(this);
    }
    Centre();
////@end ProjectDefFieldDlg creation
    return true;
}


/*!
 * ProjectDefFieldDlg destructor
 */

ProjectDefFieldDlg::~ProjectDefFieldDlg()
{
////@begin ProjectDefFieldDlg destruction
////@end ProjectDefFieldDlg destruction
}


/*!
 * Member initialisation
 */

void ProjectDefFieldDlg::Init()
{
////@begin ProjectDefFieldDlg member initialisation
    m_DlgAFD_Field_Def = NULL;
    m_DlgAFD_Field_Precision = NULL;
    m_DlgAFD_Field_Scale = NULL;
    m_DlgAFD_Result = NULL;
    m_DlgAFD_Notebook = NULL;
    m_DlgAFD_Panel_Coded_Values = NULL;
    m_DlgAFD_Coded_Val_List = NULL;
    m_DlgAFD_Default_Val = NULL;
    m_DlgAFD_Panel_Range = NULL;
    m_DlgAFD_Range_Default = NULL;
    m_DlgAFD_Range_Min = NULL;
    m_DlgAFD_Range_Max = NULL;
////@end ProjectDefFieldDlg member initialisation
}


/*!
 * Control creation for wxDialog
 */

void ProjectDefFieldDlg::CreateControls()
{    
////@begin ProjectDefFieldDlg content construction
    ProjectDefFieldDlg* itemDialog1 = this;

    wxBoxSizer* itemBoxSizer2 = new wxBoxSizer(wxVERTICAL);
    itemDialog1->SetSizer(itemBoxSizer2);

    wxBoxSizer* itemBoxSizer3 = new wxBoxSizer(wxHORIZONTAL);
    itemBoxSizer2->Add(itemBoxSizer3, 0, wxGROW|wxALL, 5);

    wxStaticText* itemStaticText4 = new wxStaticText( itemDialog1, wxID_STATIC, _("Field name :"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer3->Add(itemStaticText4, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_DlgAFD_Field_Def = new wxTextCtrl( itemDialog1, ID_DLGAFD_FIELD_DEF, _T(""), wxDefaultPosition, wxSize(200, -1), 0 );
    itemBoxSizer3->Add(m_DlgAFD_Field_Def, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticBox* itemStaticBoxSizer6Static = new wxStaticBox(itemDialog1, wxID_ANY, _("Field properties"));
    wxStaticBoxSizer* itemStaticBoxSizer6 = new wxStaticBoxSizer(itemStaticBoxSizer6Static, wxVERTICAL);
    itemBoxSizer2->Add(itemStaticBoxSizer6, 0, wxGROW|wxALL, 5);

    wxFlexGridSizer* itemFlexGridSizer7 = new wxFlexGridSizer(4, 2, 0, 0);
    itemFlexGridSizer7->AddGrowableCol(1);
    itemStaticBoxSizer6->Add(itemFlexGridSizer7, 0, wxGROW, 5);

    wxStaticText* itemStaticText8 = new wxStaticText( itemDialog1, wxID_STATIC, _("Data Type :"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer7->Add(itemStaticText8, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxArrayString itemChoice9Strings;
    itemChoice9Strings.Add(_("Integer"));
    itemChoice9Strings.Add(_("Float"));
    itemChoice9Strings.Add(_("Text"));
    itemChoice9Strings.Add(_("Date"));
    wxChoice* itemChoice9 = new wxChoice( itemDialog1, ID_DLGAFD_DATA_TYPE, wxDefaultPosition, wxDefaultSize, itemChoice9Strings, 0 );
    itemChoice9->SetStringSelection(_("Text"));
    itemFlexGridSizer7->Add(itemChoice9, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText10 = new wxStaticText( itemDialog1, wxID_STATIC, _("Field precision :"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer7->Add(itemStaticText10, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_DlgAFD_Field_Precision = new wxSpinCtrl( itemDialog1, ID_DLGAFD_FIELD_PRECISION, _T("0"), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100, 0 );
    itemFlexGridSizer7->Add(m_DlgAFD_Field_Precision, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText12 = new wxStaticText( itemDialog1, wxID_STATIC, _("Field scale :"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer7->Add(itemStaticText12, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_DlgAFD_Field_Scale = new wxSpinCtrl( itemDialog1, ID_DLGAFD_FIELD_SCALE, _T("0"), wxDefaultPosition, wxDefaultSize, wxSP_ARROW_KEYS, 0, 100, 0 );
    itemFlexGridSizer7->Add(m_DlgAFD_Field_Scale, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText14 = new wxStaticText( itemDialog1, wxID_STATIC, _("Result sample :"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer7->Add(itemStaticText14, 0, wxALIGN_LEFT|wxALIGN_TOP|wxALL, 5);

    m_DlgAFD_Result = new wxTextCtrl( itemDialog1, ID_DLGAFD_RESULT, _T(""), wxDefaultPosition, wxDefaultSize, wxTE_CENTRE );
    itemFlexGridSizer7->Add(m_DlgAFD_Result, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxCheckBox* itemCheckBox16 = new wxCheckBox( itemDialog1, ID_DLGAFD_ORIENTATION_FIELD, _("Orientation field"), wxDefaultPosition, wxDefaultSize, 0 );
    itemCheckBox16->SetValue(false);
    itemFlexGridSizer7->Add(itemCheckBox16, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxLEFT|wxRIGHT|wxTOP, 5);

    wxCheckBox* itemCheckBox17 = new wxCheckBox( itemDialog1, ID_DLGAFD_CONSTRAIN_VALUES, _("Constrain allowed values"), wxDefaultPosition, wxDefaultSize, 0 );
    itemCheckBox17->SetValue(false);
    itemBoxSizer2->Add(itemCheckBox17, 0, wxGROW|wxALL, 5);

    m_DlgAFD_Notebook = new wxNotebook( itemDialog1, ID_DLGAFD_NOTEBOOK, wxDefaultPosition, wxDefaultSize, wxBK_DEFAULT );
    m_DlgAFD_Notebook->Show(false);

    m_DlgAFD_Panel_Coded_Values = new wxPanel( m_DlgAFD_Notebook, ID_DLGAFD_PANEL_CODED_VALUES, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
    wxStaticBox* itemStaticBoxSizer20Static = new wxStaticBox(m_DlgAFD_Panel_Coded_Values, wxID_ANY, _("Allowed values"));
    wxStaticBoxSizer* itemStaticBoxSizer20 = new wxStaticBoxSizer(itemStaticBoxSizer20Static, wxVERTICAL);
    m_DlgAFD_Panel_Coded_Values->SetSizer(itemStaticBoxSizer20);

    m_DlgAFD_Coded_Val_List = new ProjectDefFieldList( m_DlgAFD_Panel_Coded_Values, ID_DLGAFD_CODED_VAL_LIST, wxDefaultPosition, wxSize(100, 200), wxLC_REPORT );
    itemStaticBoxSizer20->Add(m_DlgAFD_Coded_Val_List, 1, wxGROW|wxLEFT|wxRIGHT, 5);

    wxBoxSizer* itemBoxSizer22 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer20->Add(itemBoxSizer22, 0, wxGROW|wxALL, 5);
    wxStaticText* itemStaticText23 = new wxStaticText( m_DlgAFD_Panel_Coded_Values, wxID_STATIC, _("Default value :"), wxDefaultPosition, wxDefaultSize, 0 );
    itemBoxSizer22->Add(itemStaticText23, 0, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxArrayString m_DlgAFD_Default_ValStrings;
    m_DlgAFD_Default_Val = new wxChoice( m_DlgAFD_Panel_Coded_Values, ID_DLGAFD_DEFAULT_VAL, wxDefaultPosition, wxDefaultSize, m_DlgAFD_Default_ValStrings, 0 );
    itemBoxSizer22->Add(m_DlgAFD_Default_Val, 1, wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxBoxSizer* itemBoxSizer25 = new wxBoxSizer(wxHORIZONTAL);
    itemStaticBoxSizer20->Add(itemBoxSizer25, 0, wxGROW|wxALL, 5);
    wxFlatButton* itemFlatButton26 = new wxFlatButton( m_DlgAFD_Panel_Coded_Values, ID_DLGAFD_VAL_ADD, _("+"), wxDefaultPosition, wxSize(40, -1), 0 );
    itemFlatButton26->SetValue(false);
    itemBoxSizer25->Add(itemFlatButton26, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT|wxTOP|wxBOTTOM, 5);

    wxFlatButton* itemFlatButton27 = new wxFlatButton( m_DlgAFD_Panel_Coded_Values, ID_DLGAFD_VAL_REMOVE, _("-"), wxDefaultPosition, wxSize(40, -1), 0 );
    itemFlatButton27->SetValue(false);
    itemBoxSizer25->Add(itemFlatButton27, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT|wxTOP|wxBOTTOM, 5);

    wxFlatButton* itemFlatButton28 = new wxFlatButton( m_DlgAFD_Panel_Coded_Values, ID_DLGAFD_VAL_IMPORT, _("Import..."), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlatButton28->SetValue(false);
    itemBoxSizer25->Add(itemFlatButton28, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT|wxTOP|wxBOTTOM, 5);

    wxFlatButton* itemFlatButton29 = new wxFlatButton( m_DlgAFD_Panel_Coded_Values, ID_DLGAFD_VAL_EXPORT, _("Export..."), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlatButton29->SetValue(false);
    itemBoxSizer25->Add(itemFlatButton29, 0, wxALIGN_CENTER_VERTICAL|wxRIGHT|wxTOP|wxBOTTOM, 5);

    m_DlgAFD_Notebook->AddPage(m_DlgAFD_Panel_Coded_Values, _("Coded values"));

    m_DlgAFD_Panel_Range = new wxPanel( m_DlgAFD_Notebook, ID_DLGAFD_PANEL_RANGE, wxDefaultPosition, wxDefaultSize, wxTAB_TRAVERSAL );
    wxFlexGridSizer* itemFlexGridSizer31 = new wxFlexGridSizer(3, 2, 0, 0);
    itemFlexGridSizer31->AddGrowableCol(1);
    m_DlgAFD_Panel_Range->SetSizer(itemFlexGridSizer31);

    wxStaticText* itemStaticText32 = new wxStaticText( m_DlgAFD_Panel_Range, wxID_STATIC, _("Default value :"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer31->Add(itemStaticText32, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_DlgAFD_Range_Default = new wxTextCtrl( m_DlgAFD_Panel_Range, ID_DLGAFD_RANGE_DEFAULT, _T(""), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer31->Add(m_DlgAFD_Range_Default, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText34 = new wxStaticText( m_DlgAFD_Panel_Range, wxID_STATIC, _("Minimum value :"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer31->Add(itemStaticText34, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_DlgAFD_Range_Min = new wxTextCtrl( m_DlgAFD_Panel_Range, ID_DLGAFD_RANGE_MIN, _T(""), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer31->Add(m_DlgAFD_Range_Min, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    wxStaticText* itemStaticText36 = new wxStaticText( m_DlgAFD_Panel_Range, wxID_STATIC, _("Maximum value :"), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer31->Add(itemStaticText36, 0, wxALIGN_LEFT|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_DlgAFD_Range_Max = new wxTextCtrl( m_DlgAFD_Panel_Range, ID_DLGAFD_RANGE_MAX, _T(""), wxDefaultPosition, wxDefaultSize, 0 );
    itemFlexGridSizer31->Add(m_DlgAFD_Range_Max, 0, wxGROW|wxALIGN_CENTER_VERTICAL|wxALL, 5);

    m_DlgAFD_Notebook->AddPage(m_DlgAFD_Panel_Range, _("Range"));

    itemBoxSizer2->Add(m_DlgAFD_Notebook, 1, wxGROW|wxLEFT|wxRIGHT, 5);

    wxStdDialogButtonSizer* itemStdDialogButtonSizer38 = new wxStdDialogButtonSizer;

    itemBoxSizer2->Add(itemStdDialogButtonSizer38, 0, wxALIGN_RIGHT|wxALL, 5);
    wxButton* itemButton39 = new wxButton( itemDialog1, wxID_CANCEL, _("&Cancel"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStdDialogButtonSizer38->AddButton(itemButton39);

    wxButton* itemButton40 = new wxButton( itemDialog1, wxID_OK, _("&OK"), wxDefaultPosition, wxDefaultSize, 0 );
    itemStdDialogButtonSizer38->AddButton(itemButton40);

    itemStdDialogButtonSizer38->Realize();

////@end ProjectDefFieldDlg content construction
}


/*!
 * Should we show tooltips?
 */

bool ProjectDefFieldDlg::ShowToolTips()
{
    return true;
}

/*!
 * Get bitmap resources
 */

wxBitmap ProjectDefFieldDlg::GetBitmapResource( const wxString& name )
{
    // Bitmap retrieval
////@begin ProjectDefFieldDlg bitmap retrieval
    wxUnusedVar(name);
    return wxNullBitmap;
////@end ProjectDefFieldDlg bitmap retrieval
}

/*!
 * Get icon resources
 */

wxIcon ProjectDefFieldDlg::GetIconResource( const wxString& name )
{
    // Icon retrieval
////@begin ProjectDefFieldDlg icon retrieval
    wxUnusedVar(name);
    return wxNullIcon;
////@end ProjectDefFieldDlg icon retrieval
}
