/***************************************************************************
 pdfdocument.cpp
 -------------------
 copyright            : (C) 2011 CREALP Lucien Schreiber 
 email                : lucien.schreiber at crealp dot vs dot ch
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/


#include "pdfdocument.h"
#include "prjdefmemmanage.h"

bool PdfDocument::_GenerateTitle() {
	m_pdf->SetFont("Helvetica", "B", m_FontSize + 4);
	m_pdf->Cell(0, m_LineSpacing, 
			   wxString::Format(_("'%s' Data Model"),m_prjName.Upper()),
			   wxPDF_BORDER_BOTTOM, 1);
	m_pdf->SetFont("Helvetica", "I", m_FontSize);
	
	
	
	
	m_pdf->Cell(m_pdf->GetPageWidth() / 2.0 - m_pdf->GetLeftMargin() , m_LineSpacing,
			   wxString::Format(_("Generated by ToolMap on: %s"),
								wxDateTime::Now().FormatISOCombined(' ')),
			   wxPDF_BORDER_NONE, 0);
	
	m_pdf->Cell(m_pdf->GetPageWidth() / 2.0 - m_pdf->GetRightMargin(), m_LineSpacing,
			   wxString::Format(_("Page : %d / {nb}"), m_pdf->PageNo()),
			   wxPDF_BORDER_NONE, 0, wxPDF_ALIGN_RIGHT);
	m_pdf->Ln();
	return true;
}


void PdfDocument::_ComputeOnePageSize(double & width, double & height) {
	width = wxNOT_FOUND;
	height = wxNOT_FOUND;
	
	wxPdfDocument myTempDoc (m_PaperOrientation, "mm", m_PaperFormat);
	myTempDoc.SetFont("Helvetica", "", m_FontSize);
	
	
	// width
	double maxobjectswidth = 0;
	double maxattribswidth = 0;
	for (unsigned int i = 0; i< m_pdfLayers.GetCount(); i++) {
		double objectwidth = m_pdfLayers.Item(i)->GetObjectsWidth(&myTempDoc);
		maxobjectswidth = MAX(maxobjectswidth, objectwidth);
		
		double attribswidth = m_pdfLayers.Item(i)->GetAttributsWidth(&myTempDoc);
		maxattribswidth = MAX(maxattribswidth, attribswidth);
	}
	
	if (wxIsSameDouble(maxattribswidth, 0) && wxIsSameDouble(maxobjectswidth, 0)) {
		return;
	}
	
	width = MAX(maxattribswidth, maxobjectswidth);
	if (IsTwoColsLayout() == true) {
		width = width * 2.0;
	}
	
	// height
	// title
	height += 10; // margins
	height += m_FontSize + 4;
	height += m_FontSize * 2.0;
	
	// layers
	for (unsigned int i = 0; i< m_pdfLayers.GetCount(); i++) {
		height += (m_FontSize + 2) * 2.0;
		
		double objectheight = m_pdfLayers.Item(i)->GetObjectsHeight(&myTempDoc);
		double attribheight = m_pdfLayers.Item(i)->GetAttributsHeight(&myTempDoc);
		
		
		if (IsTwoColsLayout() == true) {
			height += MAX(objectheight, attribheight);
		}
		else {
			height = height + objectheight + attribheight;
		}
	}
}




PdfDocument::PdfDocument(PrjDefMemManage * project) {
	wxASSERT(project);
	m_prjName = project->m_PrjName;
	m_PaperFormat = wxPAPER_A4;
	m_PaperWidth = wxNOT_FOUND;
	m_PaperHeight = wxNOT_FOUND;
	
	m_PaperOrientation = wxPORTRAIT;
	m_FontSize = 10; 
	m_LineSpacing = 6;
	m_Decorate = true;
	m_PageBreak = true;
	m_TwoCols = false;
	m_OnePage = false;
	_UpdatePageWidth();
	m_pdf = NULL;
	
	// adding layers (copy of them)
	for (int i = 0; i< project->GetCountLayers(); i++) {
		PdfLayer * myLayer = new PdfLayer(this, project->m_PrjLayerArray.Item(i));
		wxASSERT(myLayer);
		m_pdfLayers.Add(myLayer);
	}
	wxLogDebug("%ld PDF Layers added", m_pdfLayers.GetCount());
}



PdfDocument::~PdfDocument() {
	// manually clearing array of layers, Clear() or Empty() didn't work
	unsigned int iCount = m_pdfLayers.GetCount();
	for (unsigned int i = 0; i<iCount; i++)
	{
		PdfLayer * myLayer = m_pdfLayers.Item(0);
		wxDELETE(myLayer);
		m_pdfLayers.RemoveAt(0);
	}
	wxASSERT(m_pdfLayers.GetCount()==0);
	wxDELETE(m_pdf);
}



bool PdfDocument::Generate(const wxFileName & filename) {

	// one page layout
	if (m_OnePage == true) {
		double myWidth = wxNOT_FOUND;
		double myHeight = wxNOT_FOUND;
		_ComputeOnePageSize(myWidth, myHeight);
		wxLogDebug("Paper width is: %f, height: %f", myWidth, myHeight);
		SetPaperSize(myWidth, myHeight);
	}
	
	// create pdf object
	if (m_PaperWidth == wxNOT_FOUND || m_PaperHeight == wxNOT_FOUND) {
		m_pdf = new wxPdfDocument(m_PaperOrientation, "mm", m_PaperFormat);
	}
	else {
		m_pdf = new wxPdfDocument(m_PaperOrientation, m_PaperWidth, m_PaperHeight, "mm");
	}
	wxASSERT(m_pdf);

	m_pdf->AliasNbPages();
	m_pdf->AddPage(m_PaperOrientation);
	_GenerateTitle();
	m_pdf->Ln();
	
	for (unsigned int i = 0; i<m_pdfLayers.GetCount(); i++) {
		if (HasPageBreak()) {
			if (i != 0) {
				m_pdf->AddPage(m_PaperOrientation);
				_GenerateTitle();
				m_pdf->Ln();
			}
		}
		else {
			m_pdf->Ln(GetLineSpacing());
		}
		m_pdfLayers.Item(i)->Generate();
	}
	m_pdf->SaveAsFile(filename.GetFullPath());
	wxLogMessage(_("Data model exported to: '%s'"), filename.GetFullName());
	wxDELETE(m_pdf);
	return true;
}


void PdfDocument::_UpdatePageWidth(){
	wxPdfDocument * myTempDoc = NULL;
	if (m_PaperWidth == wxNOT_FOUND || m_PaperHeight == wxNOT_FOUND) {
		myTempDoc = new wxPdfDocument(m_PaperOrientation, "mm", m_PaperFormat);
	}
	else {
		myTempDoc = new wxPdfDocument(m_PaperOrientation, m_PaperWidth, m_PaperHeight, "mm");
	}
	wxASSERT(myTempDoc);	
	m_UsablePageWidth = myTempDoc->GetPageWidth() - myTempDoc->GetLeftMargin() - myTempDoc->GetRightMargin();
	wxDELETE(myTempDoc);
}



void PdfDocument::SetFontSize(int value) {
	m_FontSize = value;
}



void PdfDocument::SetLineSpacing(double value) {
	m_LineSpacing = value;
}



void PdfDocument::SetPaperFormat(wxPaperSize value) {
	m_PaperFormat = value;
	m_PaperHeight = wxNOT_FOUND;
	m_PaperWidth = wxNOT_FOUND;
	_UpdatePageWidth();
}


void PdfDocument::SetDecorate(bool value) {
	m_Decorate = value;
}


void PdfDocument::SetPaperOrientation(wxPrintOrientation value) {
	m_PaperOrientation = value;
	_UpdatePageWidth();
}



double PdfDocument::GetUsablePageWidth(){
	return m_UsablePageWidth;
}



bool PdfDocument::IsLandscape() {
	if (m_PaperOrientation == wxLANDSCAPE) {
		return true;
	}
	return false;
}


wxPdfDocument * PdfDocument::GetPdfRef(){
	return m_pdf;
}



void PdfDocument::SetTwoColsLayout(bool value) {
	m_TwoCols = value;
}



void PdfDocument::SetPageBreak(bool value) {
	m_PageBreak = value;
}


void PdfDocument::SetOnePage(bool value) {
	m_OnePage = value;
	SetPageBreak(false);
}

void PdfDocument::SetPaperSize(double width, double height) {
	m_PaperWidth = width;
	m_PaperHeight = height;
	_UpdatePageWidth();

}

